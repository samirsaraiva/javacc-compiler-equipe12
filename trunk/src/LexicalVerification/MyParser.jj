options{  STATIC = false;}PARSER_BEGIN(MyParser)public class MyParser{  public static void main(String [] args) throws ParseException, TokenMgrError  {    MyParser parser = new MyParser(System.in);    parser.Program();  }}PARSER_END(MyParser)SKIP :{  " "| "\n"| "\r"| "\r\n"}TOKEN :{  < AND : "&&" >| < LESS : "<" >| < TIMES : "*" >| < PLUS : "+" >| < MINUS : "-" >| < CLASS : "class" >| < PUBLIC : "public" >| < STATIC : "static" >| < VOID : "void" >| < MAIN : "main" >| < STRING : "String" >| < EXTENDS : "extends" >| < LENGTH : "length" >| < RETURN : "return" >| < INT : "int" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < LPAREN : "(" >| < RPAREN : ")" >| < LBRACE : "{" >| < RBRACE : "}" >| < EQUAL : "=" >| < SEMI : ";" >| < COMMA : "," >| < DOT : "." >| < NEW : "new" >| < BOOLEAN : "boolean" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < PRINT : "System.out.println" >| < TRUE : "true" >| < FALSE : "false" >| < THIS : "this" >| < NOT : "!" >}TOKEN :{  < #DIGIT : [ "0"-"9" ] >| < #LETTER :    [ "a"-"z" ]  | [ "A"-"Z" ] >| < ID :    < LETTER >    (      < LETTER >    | "_"    | < DIGIT >    )* >| < NUM : (< DIGIT >)+ >}void Program() :{}{  MainClass()  (   ClassDecl()  )*}void MainClass() :{}{  < CLASS > < ID > < LBRACE > < PUBLIC > < STATIC > < VOID > < MAIN > < LPAREN > < STRING > < LBRACKET > < RBRACKET > < ID > < RPAREN > < LBRACE > Statement() < RBRACE > < RBRACE >}void ClassDecl() :{}{  LOOKAHEAD(3)  < CLASS > < ID > < LBRACE >  (    VarDecl()  )*  (    MethodDecl()  )*  < RBRACE >| < CLASS > < ID > < EXTENDS > < ID > < LBRACE >  (    VarDecl()  )*  (    MethodDecl()  )*  < RBRACE >}void VarDecl() :{}{  Type() < ID > < SEMI >}void MethodDecl() :{}{  < PUBLIC > Type() < ID > < LPAREN > FormalList() < RPAREN > < LBRACE >  (    LOOKAHEAD(2)    VarDecl()  )*  (    Statement()  )*  < RETURN > Exp() < SEMI > < RBRACE >}void FormalList() :{}{  (    Type() < ID >    (      FormalRest()    )*  )?}void FormalRest() :{}{  < COMMA > Type() < ID >}void Type() :{}{  LOOKAHEAD(2)  < INT > < LBRACKET > < RBRACKET >| < INT >| < BOOLEAN >| < ID >}void Statement() :{}{  < LBRACE >  (    Statement()  )*  < RBRACE >| < IF > < LPAREN > Exp() < RPAREN > Statement() < ELSE > Statement()| < WHILE > < LPAREN > Exp() < RPAREN > Statement()| < PRINT > < LPAREN > Exp() < RPAREN > < SEMI >| LOOKAHEAD(2)  < ID > < EQUAL > Exp() < SEMI >| < ID > < LBRACKET > Exp() < RBRACKET > < EQUAL > Exp() < SEMI >}void Exp() :{}{  < TRUE > ExpLinha()| < FALSE > ExpLinha()| < ID > ExpLinha()| < THIS > ExpLinha()| LOOKAHEAD(2)  < NEW > < INT > "[" Exp() "]" ExpLinha()| < NEW > < ID > "(" ")" ExpLinha()| "(" Exp() ")" ExpLinha()| < NUM > ExpLinha()| "!" Exp() ExpLinha()   < EOF >}void ExpList() :{}{  Exp()  (    ExpRest()  )*}void ExpRest() :{}{  "," Exp()}void ExpLinha() :{}{  OpExp() Exp() ExpLinha()| "[" Exp() "]" ExpLinha()| LOOKAHEAD(2) "." < LENGTH > ExpLinha()|    "." < ID > "(" ExpList() ")" ExpLinha() |{}}void OpExp() :{}{  < PLUS >| < MINUS >| < TIMES >| < AND >| < LESS >}